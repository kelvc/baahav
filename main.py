from aiogram import Bot, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import json
from SimpleQIWI import *
from time import sleep

with open('config.json') as f:
   config = json.load(f)

TOKEN = config['token']
phone = config['qiwinumber']
token = config['qiwitoken']
api = QApi(token=token, phone=phone)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

base = []
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    button_hi = KeyboardButton('üéì –•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã!')

    hi = ReplyKeyboardMarkup(resize_keyboard=True)
    hi.add(button_hi)
            
    await bot.send_photo(message.chat.id, photo='https://media.discordapp.net/attachments/1018941949778071594/1025400185934860288/by_devor.png?width=696&height=663', 
                        caption=f"üñê –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\n\n–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –û–¢–í–ï–¢–´ –û–ì–≠ –ï–ì–≠ –ò –ú–ù–û–ì–ò–ï –î–†–£–ì–ò–ïüìî\n\nüëá –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏ –æ—Ç–≤–µ—Ç—ã –º–µ–Ω—å—à–µ –∑–∞ –º–∏–Ω—É—Ç—É.", reply_markup=hi)


@dp.message_handler(Text(equals='üéì –•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã!'))
async def klass(message: types.Message):

    value = config['value']
    inline_btn_1 = InlineKeyboardButton('üí∏ –û–ü–õ–ê–¢–ò–¢–¨', callback_data='button1')
    inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)
    if isinstance(value, int) == True:
        await message.reply(f'–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ {value}‚ÇΩ\n–ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –±—É–¥—É—Ç?\n‚Äî –í–ü–† (–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –†–∞–±–æ—Ç—ã)\n‚Äî –°—Ç–∞—Ç–ì—Ä–∞–¥ (–≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–∏—Å—Ç–µ–º—ã)\n‚Äî –ö–î–† –∏ –ú–¶–ö–û (–≤—Å–µ –∫–ª–∞—Å—Å—ã)\n‚Äî –†–î–† –∏ –ù–ò–ö–û (–≤—Å–µ –∫–ª–∞—Å—Å—ã)\n‚Äî –î–ö–† –∏ –†–ü–† (–≤—Å–µ –∫–ª–∞—Å—Å—ã)\n‚Äî –í–û–® (–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –û–ª–∏–º–ø–∏–∞–¥–∞ –®–∫–æ–ª—å–Ω–∏–∫–æ–≤) - —à–∫–æ–ª—å–Ω—ã–π —ç—Ç–∞–ø\n‚Äî –ö–æ–Ω–∫—É—Ä—Å—ã: –†—É—Å—Å–∫–∏–π –ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫, –ö–µ–Ω–≥—É—Ä—É, –ö–ò–¢, –ó–æ–ª–æ—Ç–µ –†—É–Ω–æ, –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –ë—É–ª—å–¥–æ–≥, –ß–ò–ü –∏ –¥—Ä—É–≥–∏–µ.\n', reply_markup=inline_kb1)
    else:
        print('Error: –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ config.json')


@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    qiwinick = config['qiwinick']
    inline_btn_1 = InlineKeyboardButton('‚è∞ –°–°–´–õ–ö–ê', url=f'https://qiwi.com/n/{qiwinick}', callback_data='button2')
    inline_btn_2 = InlineKeyboardButton('üí∏ –û–ü–õ–ê–¢–ò–õ', callback_data='button3')
    inline_kb2 = InlineKeyboardMarkup().add(inline_btn_2, inline_btn_1)
    price = config['value']                   
    comment = api.bill(price)                               

    await bot.send_message(callback_query.from_user.id, f'–û–ü–õ–ê–¢–ê: QIWI,\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - {comment}\n–ù–∏–∫ –∫–∏–≤–∏ - {qiwinick}\n–°—É–º–º–∞ - {price}',reply_markup=inline_kb2)

    base.append(comment)

@dp.callback_query_handler(lambda c: c.data == 'button3')
async def oplata(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    api.start()                 
    if base != []:
        for i in base:
            if api.check(i):
                print("–ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω!")
                await bot.send_message(config['owner_id'], f'üí∏ –ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞.\nID: {callback_query.from_user.id}\nNICK: {callback_query.from_user.first_name}')
                base.remove(i)
                break
        
        api.stop()

        await bot.send_message(callback_query.from_user.id,'–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç')
    else:
        await bot.send_message(callback_query.from_user.id,'–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç')

if __name__ == '__main__':
    executor.start_polling(dp)